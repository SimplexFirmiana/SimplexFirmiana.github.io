<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++中的C</title>
    <url>/2023/03/09/C++/</url>
    <content><![CDATA[<blockquote>
<p>程序中，标识符代表存放变量或被编译过的函数体的存储空间。<strong>linkage</strong>同连接器所见的方式描述存储空间。</p>
</blockquote>
<blockquote>
<p>static 使变量的生命周期持续到程序结束。</p>
</blockquote>
<blockquote>
<p>extern 关键字告诉编译器存在变量或者函数，但并不一定在当前文件中定义</p>
</blockquote>
<p>内部连接 Internal linkage</p>
<blockquote>
<p>C/C++中，内部连接由 static 指定，意味着只对正在编译的文件创建存储空间。</p>
</blockquote>
<p>外部连接 External linkage</p>
<blockquote>
<p>为所有被编译过的文件创建存储空间，连接器解决存储空间的引用。函数外定义的变量和函数定义默认为外部连接，可以使用extern声明提供使用。</p>
</blockquote>
<blockquote>
<p>C++中对于 <strong>const</strong> 有时必须使用extern。</p>
</blockquote>
<p>命名常量</p>
<blockquote>
<p>修饰符 <strong>const</strong> 告诉编译器当前变量表示常量，<strong>volatile</strong>则表示不确定量。</p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const_cast</span>&lt;&gt;() 允许对<span class="type">const</span>/<span class="keyword">volatile</span>数据进行转换</span><br></pre></td></tr></table></figure></div>

<p>预处理程序</p>
<blockquote>
<p>使用宏时编译器不会报告任何错误信息，它不对参数做任何类型的检查。</p>
</blockquote>
<p>asm关键字</p>
<blockquote>
<p>asm关键字时一种转义（escape）机制，允许在C++程序中写汇编代码。</p>
</blockquote>
<p>typedef</p>
<blockquote>
<p>表示类型定义，但常用于别名</p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> 原类型名 别名</span><br></pre></td></tr></table></figure></div>

<p>struct</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TMP</span> &#123;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">&#125; ;</span><br><span class="line">TMP o,s;</span><br><span class="line">TMP *op = &amp; o;</span><br><span class="line">op-&gt;c = <span class="string">&#x27;c&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<p>enum 枚举类型</p>
<blockquote>
<p>将名称与数字相联系，且不允许做增量。</p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ST</span> &#123; x,c,v &#125;; <span class="comment">// x,c,v = 0,1,2</span></span><br><span class="line">ST sp = x;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">ST</span> &#123; x=<span class="number">2</span>, c ,v &#125;; <span class="comment">// c = 3, v = 4</span></span><br></pre></td></tr></table></figure></div>

<p>union</p>
<blockquote>
<p>定义多类型数据名，但开辟的空间大小时类型中最大的类型</p>
</blockquote>
<p>指针</p>
<blockquote>
<p>数组名是数组的起始地址，同样&amp;数组名[0]也是起始地址。即数组标识符是数组起始处的只读指针。</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE *ip = X</span><br><span class="line">X ：地址</span><br><span class="line">*ip : 数据内容</span><br><span class="line">ip ： 数据存储地址</span><br></pre></td></tr></table></figure></div>



<p>预处理器调试标记</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="comment">// CODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br></pre></td></tr></table></figure></div>

<p>运行期调试标记</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PR(A) COUT&lt;&lt; #A &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; (A) &lt;&lt;endl;</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Make</title>
    <url>/2023/03/09/Make/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>C++指针</title>
    <url>/2023/03/09/Pointer/</url>
    <content><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote>
<p><strong>指针Pointer</strong>：C/C++中存放地址的变量类型，可以保存地址，可以使用地址修改变量数值，可以是另一个变量的别名。</p>
</blockquote>
<blockquote>
<p><strong>&amp;</strong> 运算符提供元素的地址，即<strong>标识符的地址</strong>。</p>
</blockquote>
<blockquote>
<p><em><em>变量类型  指针</em>  标识符</em>* </p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">TYPE X = NUM;</span><br><span class="line">TYPE* IP = &amp;X;</span><br><span class="line">X = *IP, IP = &amp;X</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>按值传递：相当于COPY变量进行赋值</p>
</blockquote>
<blockquote>
<p>IP中的值就是变量X的地址，*IP（指针IP）指向变量X。</p>
</blockquote>
<h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">F(&amp;IP)</span><br><span class="line">F(X)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>IP = X , &amp;X = &amp;IP</p>
</blockquote>
<h2 id="函数-amp-指针"><a href="#函数-amp-指针" class="headerlink" title="函数&amp;指针"></a>函数&amp;指针</h2><h3 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h3><blockquote>
<p>类型标识符 * 函数名（参数）;</p>
<p>返回值是 类型标识符，例 char * Func() 返回值是一个字符类型的指针，是一个地址。</p>
</blockquote>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><blockquote>
<p>本质是一个指针变量，一个指向函数的指针。</p>
</blockquote>
<blockquote>
<p>类型标识符 (*函数名)(参数)</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 函数指针赋值</span><br><span class="line">opt = &amp;Func();</span><br><span class="line">opt = Func() // 函数标识符即为地址，&amp;可有可无</span><br><span class="line"></span><br><span class="line">// 调用函数指针</span><br><span class="line">opt = (*Func)();</span><br><span class="line">opt = Func()</span><br></pre></td></tr></table></figure></div>

<h3 id="函数指针理解"><a href="#函数指针理解" class="headerlink" title="函数指针理解"></a>函数指针理解</h3><blockquote>
<p>遵循的原则是先右后左。函数指针可以从中间开始，向外扩展。中间开始时从变量名开始，向外扩展是先注意右边最近的项，然后注意左边（星号表示的指针），注意右边（参数列表），再注意左边（函数返回值）。</p>
</blockquote>
<h3 id="表格驱动码-Table-Driven-Code-：指向函数的指针数组"><a href="#表格驱动码-Table-Driven-Code-：指向函数的指针数组" class="headerlink" title="表格驱动码(Table-Driven Code)：指向函数的指针数组"></a>表格驱动码(Table-Driven Code)：指向函数的指针数组</h3><blockquote>
<p>依据状态变量选择被执行函数，用以替代条件语句或者Case语句。</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>const</title>
    <url>/2023/03/09/const/</url>
    <content><![CDATA[<h2 id="C-：const"><a href="#C-：const" class="headerlink" title="C++：const"></a>C++：const</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><blockquote>
<p>由于使用#define 没有类型信息，在使用的时候容易引起不知名的错误，所以提出使用const。</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>使用const定义需要放入头文件中，通过头文件将const定义单独分配给一个编译单元。</p>
</blockquote>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><blockquote>
<p>const默认是内部连接，只有在当前文件中可见，在连接时不能被其他编译单元看到。</p>
</blockquote>
<h3 id="指向const的指针"><a href="#指向const的指针" class="headerlink" title="指向const的指针"></a>指向const的指针</h3><blockquote>
<p>const TYPE * X ;</p>
</blockquote>
<h3 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h3><blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>overload</title>
    <url>/2023/03/09/overload/</url>
    <content><![CDATA[<h3 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h3><blockquote>
<p>编译器区分函数可以通过同一函数名称，不同参数产生不同的内部名实现。</p>
</blockquote>
<h3 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h3><blockquote>
<p>struct与class的不同之处在于，struct默认为public，class默认为private。</p>
</blockquote>
<blockquote>
<p>union 可以带有构造函数，析构函数，成员函数甚至访问权限。但class存储数据的方式是同一内存区覆盖存放。同时union不能在继承时作为基类使用。</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>inline-function</title>
    <url>/2023/03/09/inline-function/</url>
    <content><![CDATA[<h3 id="预处理器的缺陷"><a href="#预处理器的缺陷" class="headerlink" title="预处理器的缺陷"></a>预处理器的缺陷</h3><blockquote>
<p>C++中，预处理器宏存在两个问题，一是宏类似于函数被进行调要，同时也存在问题。例如表达式作为参数时优先级导致的运算错误，当然，可以通过括弧进行解决，但与简单编程相违背。二是预处理器不允许访问类的成员数据，即预处理器不能用作类的成员函数。例如在宏里没有办法表示类的范围；处理private类成员问题。</p>
</blockquote>
<h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><blockquote>
<p>C++中，宏的概念是作为内联函数实现的，不同的是内联函数在适当的地方像宏一样展开。</p>
</blockquote>
<blockquote>
<p>类中定义的函数自动成为内联函数，也就是访问函数。也可以在普通函数前面加上 inline 关键字变成内联函数。</p>
</blockquote>
<blockquote>
<p>内联定义一般在头文件里，使用的目的也是减少函数调用的开销。</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Books</title>
    <url>/2023/03/10/Books/</url>
    <content><![CDATA[<h3 id="GIS"><a href="#GIS" class="headerlink" title="GIS"></a>GIS</h3><blockquote>
<h2 id="GIS-Algorithms-Sagepub-Ningchuan-Xiao"><a href="#GIS-Algorithms-Sagepub-Ningchuan-Xiao" class="headerlink" title="GIS Algorithms Sagepub - Ningchuan Xiao"></a>GIS Algorithms Sagepub - Ningchuan Xiao</h2></blockquote>
]]></content>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
</search>
